union AnimalUnion = Dog | Cat

type Dog {
    animal:String
    name:String!
    hair:String!
}

type Cat {
    animal:String
    name:String!
    paws:String!
}

type Query {
    agent(id: ID!): User!
    agents(name: String, age: Int): [User!]!
    posts: [Post!]!
    post(id: ID!): Post!
    pictures: [Picture!]!
    getAnimal: AnimalUnion!
}

type Mutation {
    createAgent(data:CreateAgentInput!): User!
    createPost(title:String,content:String!,status:PostStatus!):Post!
    deletePost(id:ID!):Boolean!
    deleteAgent(id:ID!):Boolean!
    updateAgent(id:ID!,data:UpdateAgentInput!):User!
}

enum PostStatus {
    PUBLISHED
    DRAFT
}

enum AgentState {
    active
    not_active
    trainee
    guest
}

input UpdateAgentInput {
    name:String,
    age:Int,
    married:Boolean,
    average:Float
    status:AgentState
}

input CreateAgentInput {
    name:String!,
    age:Int!,
    married:Boolean
    status:AgentState!
}

type Picture {
  id: ID!
  path: String!
  author: User!
  post: Post!
}

type User {
  id: ID!
  name: String!
  age: Int
  married: Boolean!
  average: Float
  status: AgentState!
  posts: [Post!]!
  pictures: [Picture!]!
}

type Post {
  id: ID!
  title: String!
  content: String!
  author: User
  picture: Picture!
  status:PostStatus
}


